package GUI;

import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import Class.Figure;
import Class.Point;


public class Game extends JFrame implements KeyListener{
	MiniMap mmm = new MiniMap();
	int count = 0;
	Timer timer;
	int M = 15;
	int N = 20;
	int II = 100;
	int JJ = 100;
	String data[] = {
					
					
					
					};
	
	Color cl[] = {Color.GRAY, Color.black, Color.red, Color.green, Color.LIGHT_GRAY};
	Container cn;
	Figure F = new Figure(108, 114);
	JButton bt[][] = new JButton[M][N];
	int a[][] = new int[300][300];
	int A[][] = new int[30][30];
	public Game() {
		super("Tank Game - HaiZuka");
		ininMaxtrix();
		cn = init();
		timer.start();
	}
	
	public Container init() {
		Container cn = this.getContentPane();
		
		JPanel pn = new JPanel();
		pn.setLayout(new GridLayout(M, N));
		
		for (int i = 0; i < M; i++)
			for (int j = 0; j < N; j++) {
				bt[i][j] = new JButton();
				bt[i][j].addKeyListener(this);
				bt[i][j].setBorder(null);
				pn.add(bt[i][j]);
			}
		
		cn.add(pn);
		
		this.setVisible(true);
		this.setSize(900, 700);
//		this.setLocationRelativeTo(null);
		this.setLocation(390, 0);
		setResizable(false);
		update();
		setDefaultCloseOperation(EXIT_ON_CLOSE);
//		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		
		timer = new Timer(1000, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				count++;
				if (count % 40 == 0) {
					mmm.setVisible(true);
					setVisible(true);
				} else if (count % 40 > 10 && 1 > 2) {
					mmm.setVisible(false);
				}
			}
		});
		
		return cn;
	}
	
	public void ininMaxtrix() {
		int k = (int) (Math.random() * (data.length - 1));
		String dt = data[k];
		int index = 0;
		
		for (int i = 0; i < 30; i++)
			for (int j = 0; j < 30; j++)
				A[i][j] = 1;
		
		for (int i = 0; i < 300; i += 10)
			for (int j = 0; j < 300; j += 10) {
				int value = dt.charAt(index++) - 48;
				if (value == 2) {
					II = i + 4;
					JJ = j + 5;
					F = new Figure(II, JJ);
					II -= 7;
					JJ -= 9;
				}
				for (int I = i; I < i + 10; I++)
					for (int J = j; J < j + 10; J++)
						a[I][J] = value;
				if (value == 0) {
					for (int I = i; I < i + 10; I++)
						for (int J = j; J < j + 10; J++)
							if (Math.random() < 0.05)
								a[I][J] = 4;
				}
				
			}
	}
	
	public void update() {
		for (int i = 0; i < M; i++)
			for (int j = 0; j < N; j++)
				bt[i][j].setBackground(cl[a[i + II][j + JJ]]);
		Vector vv = F.getVec();
		Point p = F.getTt();
		for (int i = -1; i <= 1; i++)
			for (int j = -1; j <= 1; j++) 
				if (A[p.getX() / 10 + i][p.getY() / 10 + j] != 5){
					A[p.getX() / 10 + i][p.getY() / 10 + j] = a[p.getX() + i * 10][p.getY() + j * 10];
					if (A[p.getX() / 10 + i][p.getY() / 10 + j] == 4)
						A[p.getX() / 10 + i][p.getY() / 10 + j] = 0;
				}
		if (A[p.getX() / 10 ][p.getY() / 10] == 0)
			A[p.getX() / 10 ][p.getY() / 10] = 5;
		
//		F.getTt().Display();
		for (int i = 0; i < vv.size(); i++) {
			p = (Point) vv.elementAt(i);
			bt[p.getX() - II][p.getY() - JJ].setBackground(Color.blue);
			if (a[p.getX()][p.getY()] == 3) {
				JOptionPane.showMessageDialog(null, "Win");
				System.exit(0);
			}
		}
		mmm.Update(A, F.getTt());
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new Game();
	}


	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	public boolean check(int X, int Y, int t) {
		if (t == 1) {
			if (a[X - 2][Y] == 1 || a[X - 1][Y - 1] == 1 || a[X - 1][Y + 1] == 1)
				return false;
		}
		if (t == 2) {
			if (a[X][Y + 2] == 1 || a[X - 1][Y + 1] == 1 || a[X + 1][Y + 1] == 1)
				return false;
		}
		if (t == 3) {
			if (a[X + 2][Y] == 1 || a[X + 1][Y - 1] == 1 || a[X + 1][Y + 1] == 1)
				return false;
		}
		if (t == 4) {
			if (a[X][Y - 2] == 1 || a[X - 1][Y - 1] == 1 || a[X + 1][Y - 1] == 1)
				return false;
		}
		
		return true;
	}
	
	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		Point Ptemp = F.getTt();
		int X = Ptemp.getX();
		int Y = Ptemp.getY();
		if (e.getKeyCode() == e.VK_UP) {
			if (F.getDirection() != 1) {
				F = F.next(1);
			} else if (check(X, Y, 1)) {
				II --;
				F = F.next(1);
			}
			update();
		} else if (e.getKeyCode() == e.VK_DOWN) {
			if (F.getDirection() != 3) {
				F = F.next(3);
			} else if (check(X, Y, 3)) {
				II ++;
				F = F.next(3);
			}
			update();
		} else if (e.getKeyCode() == e.VK_LEFT) {
			if (F.getDirection() != 4) {
				F = F.next(4);
			} else if (check(X, Y, 4)) {
				JJ --;
				F = F.next(4);
			}
			update();
		} else if (e.getKeyCode() == e.VK_RIGHT) {
			if (F.getDirection() != 2) {
				F = F.next(2);
			} else if (check(X, Y, 2)) {
				JJ ++;
				F = F.next(2);
			}
			update();
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

}
